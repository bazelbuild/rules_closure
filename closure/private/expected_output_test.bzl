# Copyright 2020 The Closure Rules Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Rules for testing contents of text files generated by rules."""

load("//closure:defs.bzl", "JavaScriptBinaryInfo")

def _rule(implementation, providers):
    return rule(
        implementation = implementation,
        test = True,
        attrs = {
            "expected_output": attr.label(
                mandatory = True,
                allow_single_file = True,
            ),
            "target": attr.label(
                mandatory = True,
                providers = providers,
            ),
        },
    )

def _runfiles_path(f):
    if f.root.path:
        return f.path[len(f.root.path) + 1:]  # generated file
    else:
        return f.path  # source file

def _common_impl(ctx, fn):
    file1 = ctx.file.expected_output
    file2 = fn(ctx.attr.target)

    # Based on the implementation of `diff_test` in `bazel-skylib`,
    # licensed under Apache 2.0.
    test_bin = ctx.actions.declare_file(ctx.label.name + "-test.sh")
    ctx.actions.write(
        output = test_bin,
        content = r"""#!/bin/bash
set -euo pipefail
F1="{file1}"
F2="{file2}"
[[ "$F1" =~ ^external/* ]] && F1="${{F1#external/}}" || F1="$TEST_WORKSPACE/$F1"
[[ "$F2" =~ ^external/* ]] && F2="${{F2#external/}}" || F2="$TEST_WORKSPACE/$F2"
if [[ -d "${{RUNFILES_DIR:-/dev/null}}" && "${{RUNFILES_MANIFEST_ONLY:-}}" != 1 ]]; then
  RF1="$RUNFILES_DIR/$F1"
  RF2="$RUNFILES_DIR/$F2"
elif [[ -f "${{RUNFILES_MANIFEST_FILE:-/dev/null}}" ]]; then
  RF1="$(grep -F -m1 "$F1 " "$RUNFILES_MANIFEST_FILE" | sed 's/^[^ ]* //')"
  RF2="$(grep -F -m1 "$F2 " "$RUNFILES_MANIFEST_FILE" | sed 's/^[^ ]* //')"
elif [[ -f "$TEST_SRCDIR/$F1" && -f "$TEST_SRCDIR/$F2" ]]; then
  RF1="$TEST_SRCDIR/$F1"
  RF2="$TEST_SRCDIR/$F2"
else
  echo >&2 "ERROR: could not find \"{file1}\" and \"{file2}\""
  exit 1
fi
if ! diff "$RF1" "$RF2"; then
  echo >&2 "FAIL: files \"{file1}\" and \"{file2}\" differ"
  exit 1
fi
""".format(
            file1 = _runfiles_path(file1),
            file2 = _runfiles_path(file2),
        ),
        is_executable = True,
    )

    return DefaultInfo(
        executable = test_bin,
        files = depset(direct = [test_bin]),
        runfiles = ctx.runfiles(files = [test_bin, file1, file2]),
    )

def _closure_js_binary_output_test_get_expected_file(target):
    return target[JavaScriptBinaryInfo].output

def _closure_js_binary_output_test_impl(ctx):
    return _common_impl(ctx, _closure_js_binary_output_test_get_expected_file)

closure_js_binary_output_test = _rule(
    implementation = _closure_js_binary_output_test_impl,
    providers = [
        JavaScriptBinaryInfo,
    ],
)

def _closure_js_binary_sourcemap_test_get_expected_file(target):
    return target[JavaScriptBinaryInfo].sourcemap

def _closure_js_binary_sourcemap_test_impl(ctx):
    return _common_impl(ctx, _closure_js_binary_sourcemap_test_get_expected_file)

closure_js_binary_sourcemap_test = _rule(
    implementation = _closure_js_binary_sourcemap_test_impl,
    providers = [
        JavaScriptBinaryInfo,
    ],
)

def _closure_js_binary_property_renaming_report_test_get_expected_file(target):
    return target[JavaScriptBinaryInfo].property_renaming_report

def _closure_js_binary_property_renaming_report_test_impl(ctx):
    return _common_impl(ctx, _closure_js_binary_property_renaming_report_test_get_expected_file)

closure_js_binary_property_renaming_report_test = _rule(
    implementation = _closure_js_binary_property_renaming_report_test_impl,
    providers = [
        JavaScriptBinaryInfo,
    ],
)
